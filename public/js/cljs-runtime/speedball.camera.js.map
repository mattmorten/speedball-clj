{"version":3,"sources":["speedball/camera.cljs"],"mappings":";AAWA,AAACA;AACD,AAACC;AAGD,0BAAA,mFAAA,mDAAA,mFAAA,oFAAA,mFAAA,sFAAA,mFAAA,nkBAAKC,0SAEMC,yKACCA,8KACEC;AAEd,8BAAA,9BAAMC;AAAN,AAAA,kDAAA,uDAAA,KAAA,yDAAA,KAAA,8DAAA,mFAAA,IAAA;;AAMA,AAAA,AAAAC,yEAAA,AAAA,gFAAA,AAAA,qEAAA,mFAAA,iDAAA,mFAAA,4DAAAJ,gCAAA,2CAAA,sDAAA,wBAAA,oDAAA,GAAA,yDAAA,EAAA,6DAAA,GAAA,iEAAA,WAAA,qDAAAK;;AAAA,AAAA,AAEA,8BAAA,9BAAMC,oEAAYC;AAAlB,AAAA,0FACG,AAAA,uFAASA,QAAQ,AAAA,qFAAQA;;AAE5B,gDAAA,hDAAMC,wGACHD;AADH,AAEE,IAAAE,aAA6BF;IAA7BE,iBAAA,AAAAC,4BAAAD;YAAA,AAAAE,4CAAAF,eAAA,nEAAcG;aAAd,AAAAD,4CAAAF,eAAA,pEAAoBI;AAApB,AAAA,0FACI,8BAAA,7BAAK,AAACC,WAAW,UAAA,TAAGD,sBAAc,6BAAA,5BAAK,AAACC,WAAW,SAAA,RAAGF;;AAE5D,0BAAA,1BAAMG,4DAAQR;AAAd,AACE,IAAAS,aAA4C,AAACR,8CAA6BD;wBAA1E,AAAAU,4CAAAD,WAAA,IAAA,/EAAOG;wBAAP,AAAAF,4CAAAD,WAAA,IAAA,/EAAyBI;IAAzBF,aACY,AAACK,wBAAchB;QAD3B,AAAAU,4CAAAC,WAAA,IAAA,/DACOG;QADP,AAAAJ,4CAAAC,WAAA,IAAA,/DACSI;AADT,AAAA,0FAEG,CAAGD,IAAEF,mBAAmB,CAAGG,IAAEF;;AAKlC,6BAAA,7BAAMI,kEAAWjB,OAAOkB,iBAAiBC,eAAeC;AAAxD,AACE,IAAMC,qBAAmB,AAACpB,8CAA6BD;IACjDsB,eAAa,AAACC,gCAAsBL,iBAAiBG;IACrDC,mBAAa,AAACE,6HAA4BF,aAAaH;IACvDG,mBAAa,AAACG,6HAA4BH,iBAAaF;AAH7D,AAIE,4DAAA,rDAACM,8CAAM1B,qEAAiBsB;;AAE5B,AAAA,AAAAzB,yEAAA,AAAA,gFAAA,AAAA,mEAAA,mFAAA,iDAAA,mFAAA,oDAAAJ,wBAAAE,wBAAAA,wBAAAA,gCAAAF,gCAAA,2CAAA,sDAAA,wBAAA,oDAAA,GAAA,yDAAA,EAAA,6DAAA,GAAA,iEAAA,WAAA,qDAAAK;;AAAA,AAAA","names":["malli.instrument.instrument_BANG_","malli.core.function_schemas","speedball.camera/Camera","speedball.core/Index","speedball.core/Position","speedball.camera/new-camera","malli.core._register_function_schema_BANG_","cljs.core/identity","speedball.camera/dimensions","camera","speedball.camera/-center-relative-to-position","map__26382","cljs.core/--destructure-map","cljs.core.get","width","height","Math/floor","speedball.camera/center","vec__26383","cljs.core.nth","vec__26386","y-relative-center","x-relative-center","y","x","speedball.core/position","speedball.camera/center-to","desired-position","minimum-bounds","maximum-bounds","amount-to-subtract","desired-root","speedball.core/subtract-vectors","speedball.core.max_of_vector_elements","speedball.core.min_of_vector_elements","cljs.core.assoc"],"sourcesContent":["(ns speedball.camera\n  (:require [clojure.string :as str]\n            [clojure.pprint :as pprint]\n            [malli.core :as mc]\n            [malli.instrument :as mi]\n            [speedball.core :as core]\n            [speedball.player :as player]\n            [speedball.board :as board]\n            [speedball.ball :as ball]\n            [speedball.physics :as physics]))\n\n(mi/instrument!)\n(mc/function-schemas)\n\n\n(def Camera\n  [:map\n   [:width core/Index]\n   [:height core/Index]\n   [:position core/Position]])\n\n(defn new-camera\n  []\n  {:width 15\n   :height 10\n   :position [1 1]})\n\n(mc/=> new-camera [:=> [:cat] Camera])\n\n(defn dimensions [camera]\n  [(:height camera) (:width camera)])\n\n(defn -center-relative-to-position\n  [camera]\n  (let [{:keys [width height]} camera]\n     [(int (Math/floor (/ height 2.0))) (int (Math/floor (/ width 2.0)))]))\n\n(defn center [camera]\n  (let [[y-relative-center x-relative-center] (-center-relative-to-position camera)\n        [y x] (core/position camera)]\n    [(+ y y-relative-center) (+ x x-relative-center)]))\n\n\n;; We will define maximum-bounds as the maximum position the top-left (root) position\n;; can be. The caller will do the subtraction to figure that out\n(defn center-to [camera desired-position minimum-bounds maximum-bounds]\n  (let [amount-to-subtract (-center-relative-to-position camera)\n        desired-root (core/subtract-vectors desired-position amount-to-subtract)\n        desired-root (core/max-of-vector-elements desired-root minimum-bounds)\n        desired-root (core/min-of-vector-elements desired-root maximum-bounds)]\n    (assoc camera :position desired-root)))\n\n(mc/=> center-to [:=> [:cat Camera core/Position core/Position core/Position] Camera])\n\n;(center-to\n;  {:width 5 :height 3 :position [2 2]}\n;  [3 3])\n\n\n\n\n\n\n\n"]}