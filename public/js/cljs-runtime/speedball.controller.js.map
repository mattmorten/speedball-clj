{"version":3,"sources":["speedball/controller.cljs"],"mappings":"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","names":["malli.instrument.instrument_BANG_","malli.core.function_schemas","speedball.controller/Controller","speedball.core/Index","speedball.controller/new-human-controller","speedball.controller/player-n","controller","game","speedball.game/team-player->player-n","malli.core._register_function_schema_BANG_","cljs.core/identity","speedball.controller/new-ai-controller","player-n","map__18290","cljs.core/--destructure-map","cljs.core.get","player-within-team","team-n","speedball.game/player-n->team-player","speedball.ai/new-random-walk-intention","speedball.game/Game","speedball.controller/closest-player-n-to-ball-on-controllers-team","ball-position","speedball.game/ball-position","cljs.core.map_indexed","index","item","cljs.core.reduce","p__18291","vec__18292","cljs.core.nth","current-closest","player","vec__18295","map__18298","_","his-distance","cljs.core._EQ_","player-position","speedball.game/player-position","distance","speedball.core/distance","cljs.core/first","speedball.controller/evaluate-control","holding-ball?","speedball.game.player_has_ball_QMARK_","map__18299","closest-player-n","cljs.core.assoc","speedball.controller/clear-intention","speedball.controller/produce-ai-action","G__18300","speedball.ai/produce-action","speedball.controller/produce-ai-actions","controllers","cljs.core/vec","cljs.core.map","cljs.core.filter","speedball.controller/new-ai-controllers","human-controller","size","cljs.core/count","human-player-n","iter__5480__auto__","s__18302","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","b__18304","cljs.core/chunk-buffer","i__18303","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__18301","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","i","cljs.core.range","is-human-player?","G__18305","G__18306","speedball.controller/refresh-ai-controllers","ai-controllers","s__18308","b__18310","i__18309","iter__18307","ai","cljs.core/chunk-first"],"sourcesContent":["(ns speedball.controller\n  (:require [clojure.string :as str]\n            [clojure.pprint :as pprint]\n            [malli.core :as mc]\n            [malli.instrument :as mi]\n            [speedball.core :as core]\n            [speedball.game :as game]\n            [speedball.ai :as ai]\n            [speedball.player :as player]\n            [speedball.board :as board]\n            [speedball.ball :as ball]\n            [speedball.camera :as camera]\n            [speedball.physics :as physics]))\n\n\n(mi/instrument!)\n(mc/function-schemas)\n\n(def Controller\n  [:map\n   [:team-n core/Index]\n   [:who [:enum :human :ai]]\n   [:total-teams core/Index]\n   [:player-within-team-n core/Index]])\n\n(defn new-human-controller\n  []\n  {:team-n 0\n   :total-teams 2\n   :who :human\n   :player-within-team-n 0\n   :intention nil})\n\n(defn player-n [controller game]\n  (game/team-player->player-n game (:team-n controller) (:player-within-team-n controller)))\n\n(mc/=> new-human-controller [:=> [:cat] Controller])\n\n(defn new-ai-controller\n  [game player-n]\n  (let [{:keys [player-within-team team-n]} (game/player-n->team-player game player-n)]\n    {:team-n team-n\n     :total-teams 2\n     :who :ai\n     :player-within-team-n player-within-team\n     :intention (ai/new-random-walk-intention)}))\n\n(mc/=> new-ai-controller [:=> [:cat game/Game core/Index] Controller])\n\n\n\n(defn closest-player-n-to-ball-on-controllers-team [controller game]\n  (let [ball-position (game/ball-position game)]\n    (->> game\n         :players\n         (map-indexed (fn [index item]\n                        [index item]))\n         (reduce\n           (fn [current-closest [player-n player]]\n             ;(println \"reducing: \" current-closest \" [\" player-n \" \" player \"]\")\n             (let [[_ his-distance] current-closest\n                   {:keys [team-n]} (game/player-n->team-player game player-n)]\n               ;; If this player is on the controller's team\n               (if (= team-n (:team-n controller))\n                 (let [player-position (game/player-position game player-n)\n                       distance (core/distance ball-position player-position)]\n                   (if (or (nil? his-distance) (< distance his-distance))\n                     [player-n distance]\n                     current-closest))\n                 current-closest)))\n           nil)\n         ;; Get the n part\n         first)))\n\n(defn evaluate-control [controller game]\n  (let [player-n (player-n controller game)\n        holding-ball? (game/player-has-ball? game player-n)]\n    (if holding-ball?\n      controller\n      (let [closest-player-n (closest-player-n-to-ball-on-controllers-team controller game)\n            {:keys [player-within-team]} (game/player-n->team-player game closest-player-n)]\n        (assoc controller :player-within-team-n player-within-team)))))\n\n(defn clear-intention [controller]\n  (assoc controller :intention nil))\n\n(defn produce-ai-action\n  [controller game]\n  (let [player-n (player-n controller game)]\n    (some-> (:intention controller)\n            (ai/produce-action game player-n))))\n\n(defn produce-ai-actions\n  [controllers game]\n  (vec (->> controllers\n            (map (fn [controller] (produce-ai-action controller game)))\n            (filter identity))))\n\n\n(defn new-ai-controllers\n  [game human-controller]\n  (let [size (count (:players game))\n        human-player-n (player-n human-controller game)]\n    (vec\n      (for [i (range size)]\n        (let [is-human-player? (= i human-player-n)]\n          (cond-> (new-ai-controller game i)\n                  is-human-player? (clear-intention)))))))\n\n(defn refresh-ai-controllers\n  \"If the human-control switches, we have to re-evaluate the AIs\n   to no longer control the human player\"\n  [ai-controllers human-controller game]\n  (let [human-player-n (player-n human-controller game)]\n    (vec\n      (for [ai ai-controllers]\n        (let [is-human-player? (= (player-n ai game) human-player-n)]\n          (if is-human-player?\n            (clear-intention ai)\n            (assoc ai :intention (ai/new-random-walk-intention))))))))\n"]}