{"version":3,"sources":["speedball/game.cljs"],"mappings":"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","names":["malli.instrument.instrument_BANG_","malli.core.function_schemas","speedball.game/Game","speedball.board/Board","speedball.player/Player","speedball.ball/Ball","speedball.core/Index","var_args","G__26390","speedball.game/new-game","js/Error","speedball.board/generate-board","speedball.player.new_player","speedball.ball/generate-ball","arg","cljs.core.merge","speedball.game.new_game","malli.core._register_function_schema_BANG_","cljs.core/identity","speedball.game/which-team","game","player-n","cljs.core/mod","speedball.game/team-player->player-n","team-n","player-within-team-n","speedball.game/player-n->team-player","Math/floor","speedball.game/player-n","cljs.core.nth","speedball.game/player-position","speedball.core/Position","speedball.game/ball-position","G__26392","speedball.game/player-has-ball?","cljs.core/some","speedball.game/number-of-players","cljs.core/count","speedball.game/which-player-n-has-ball","G__26393","cljs.core.map_indexed","idx","item","cljs.core.filter","p__26394","vec__26395","_","player","cljs.core/first","speedball.game/move-player-in-game","direction","p1__26398#","cljs.core.update_in","speedball.player/move-player","speedball.game.player_has_ball_QMARK_","player-position","cljs.core/assoc-in","speedball.core/Direction","speedball.game/player-picks-up-ball","speedball.physics/cancel-movement","speedball.game/player-drops-ball","speedball.game/is-ball-in-goal?","ball-position","tile","speedball.board/tile-at","speedball.board/is-goal-tile?","speedball.game/do-goal-things","player-maybe-n","G__26399","cljs.core/inc","speedball.board/center","speedball.game/evaluate-game-for-goal","speedball.game/throw-ball","player-number","map__26400","cljs.core/--destructure-map","cljs.core.get","facing","movement-fn","cljs.core.partial","speedball.physics/init-movement","speedball.board/board-size","speedball.game/wait-one-second","speedball.physics/increment-movement","speedball.game/MovePlayerAction","speedball.game/new-move-player-action","speedball.game/apply-action","action","G__26401","cljs.core/Keyword","map__26402","speedball.game/apply-all-actions","actions","cljs.core.reduce"],"sourcesContent":["(ns speedball.game\n  (:require [clojure.string :as str]\n            [clojure.pprint :as pprint]\n            [malli.core :as mc]\n            [malli.instrument :as mi]\n            [speedball.core :as core]\n            [speedball.player :as player]\n            [speedball.board :as board]\n            [speedball.ball :as ball]\n            [speedball.camera :as camera]\n            [speedball.physics :as physics]))\n\n(mi/instrument!)\n(mc/function-schemas)\n\n(def Game\n  [:map\n   [:board board/Board]\n   [:players [:vector player/Player]]\n   [:teams [:int]]\n   [:ball ball/Ball]\n   [:goals [:vector core/Index]]])\n\n(defn new-game\n  ([]\n   {:board (board/generate-board)\n    :players [(player/new-player)\n              (player/new-player {:position [6 6]})\n              (player/new-player {:position [6 7]})\n              (player/new-player {:position [15 9]})]\n    :teams 2\n    :ball (ball/generate-ball)\n    :goals [0 0]})\n  ([arg] (merge (new-game) arg)))\n(mc/=>\n  new-game\n  [:function\n   [:=> [:cat] Game]\n   [:=> [:cat [:map]] Game]])\n\n(defn which-team [game player-n]\n  (mod player-n (-> game :teams)))\n\n\n;; Player stuff\n(defn team-player->player-n [game team-n player-within-team-n]\n  (+ team-n (* (:teams game) player-within-team-n)))\n(defn player-n->team-player [game player-n]\n  {:team-n (mod player-n (:teams game))\n   :player-within-team (int (Math/floor (/ player-n (:teams game))))})\n\n\n;;\n;; Game\n(defn player-n [game player-n]\n  (-> game :players (nth player-n)))\n\n(defn player-position [game player-n] (-> game :players (nth player-n) :position))\n(mc/=> player-position [:=> [:cat Game core/Index] core/Position])\n\n(defn ball-position [game] (-> game :ball :position))\n(mc/=> ball-position [:=> [:cat Game] core/Position])\n\n(defn player-has-ball?\n  ([game player-n]\n   (-> game :players (nth player-n) :holding-ball?))\n  ([game]\n   (true? (some :holding-ball? (-> game :players)))))\n(mc/=>\n  player-has-ball?\n  [:function\n   [:=> [:cat Game core/Index] :boolean]\n   [:=> [:cat Game] :boolean]])\n\n(defn number-of-players [game]\n  (-> game :players count))\n\n(defn which-player-n-has-ball [game]\n  (some->> game\n           :players\n           (map-indexed (fn [idx item] [idx item]))\n           (filter (fn [[_ player]] (:holding-ball? player)))\n           ;; Only get the first player that has the ball, if any\n           (first)\n           ;; Get the index value, not the player itself\n           (first)))\n(mc/=> which-player-n-has-ball [:=> [:cat Game] [:maybe core/Index]])\n\n\n(defn move-player-in-game [game player-n direction]\n  (let [game (update-in game [:players player-n] #(player/move-player % direction (:board game)))]\n    (if (player-has-ball? game player-n)\n      (let [player-position (player-position game player-n)]\n        (assoc-in game [:ball :position] player-position))\n      game)))\n(mc/=> move-player-in-game [:=> [:cat Game core/Index core/Direction] Game])\n\n(defn player-picks-up-ball [game player-n]\n  (let [player-position (player-position game player-n)]\n    (-> game\n        (assoc-in [:players player-n :holding-ball?] true)\n        (assoc-in [:ball :position] player-position)\n        (update-in [:ball] physics/cancel-movement))))\n(mc/=> player-picks-up-ball [:=> [:cat Game core/Index] Game])\n\n(defn player-drops-ball [game player-n]\n  (assoc-in game [:players player-n :holding-ball?] false))\n(mc/=> player-drops-ball [:=> [:cat Game core/Index] Game])\n\n\n\n\n(defn is-ball-in-goal? [game]\n  (let [ball-position (ball-position game)\n        tile (board/tile-at (:board game) ball-position)]\n    (board/is-goal-tile? tile)))\n\n(defn do-goal-things [game]\n  ;; todo - goal detection\n  (let [team-n 0\n        player-maybe-n (which-player-n-has-ball game)]\n    (cond-> game\n            true (update-in [:goals team-n] inc)\n            true (assoc-in [:ball :position] (board/center))\n            true (update-in [:ball] physics/cancel-movement)\n            (some? player-maybe-n) (player-drops-ball player-maybe-n))))\n\n(defn evaluate-game-for-goal [game]\n  (if (and (is-ball-in-goal? game))\n    (do-goal-things game)\n    game))\n(mc/=> evaluate-game-for-goal [:=> [:cat Game] Game])\n\n(defn throw-ball [game player-number]\n  (let [{:keys [facing]} (player-n game player-number)\n        movement-fn (partial physics/init-movement facing board/board-size)]\n    (update-in (player-drops-ball game player-number) [:ball] movement-fn)))\n\n(defn wait-one-second [game]\n  (update-in game [:ball] physics/increment-movement))\n\n\n\n;; Player Atomic Actions\n(def MovePlayerAction [:map\n                       [:name [:enum :move-player]]\n                       [:player-n core/Index]\n                       [:direction core/Direction]])\n\n(defn new-move-player-action [player-n direction]\n  {:name :move-player\n   :player-n player-n\n   :direction direction})\n\n(mc/=> new-move-player-action [:=> [:cat core/Index core/Direction] MovePlayerAction])\n\n(defn apply-action\n  [game action]\n  (case (:name action)\n    :move-player (let [{:keys [player-n direction]} action]\n                   (move-player-in-game game player-n direction))))\n\n\n(defn apply-all-actions\n  [game actions]\n  (reduce\n    (fn [game action] (apply-action game action))\n    game\n    actions))"]}