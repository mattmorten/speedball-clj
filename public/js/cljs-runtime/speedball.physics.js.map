{"version":3,"sources":["speedball/physics.cljs"],"mappings":"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","names":["malli.instrument.instrument_BANG_","malli.core.function_schemas","speedball.physics/deg-to-rad","degrees","Math/PI","speedball.physics/position-at-time","x0","y0","theta","v0","friction-coeff","t","-friction-coeff","velocity","x__5087__auto__","y__5088__auto__","Math/exp","xt","Math/cos","yt","Math/sin","p__26327","map__26328","cljs.core/--destructure-map","cljs.core.get","speedball.physics/position-to-vec","x","y","p__26329","vec__26330","cljs.core.nth","speedball.physics/vec-to-int","p__26333","vec__26338","speedball.physics/scale","scaling","var_args","G__26346","speedball.physics/positions","js/Error","friction","speedball.physics.positions","cljs.core/LazySeq","cljs.core/cons","speedball.physics/handle-min-flip-component","board-min-value","value","overflow","speedball.physics/handle-max-flip-component","board-max-value","p__26351","p__26352","vec__26353","vec__26356","speedball.physics/handle-min-flip","board-min-y","board-min-x","value-y","value-x","p__26359","p__26360","vec__26361","vec__26364","speedball.physics/handle-max-flip","board-max-y","board-max-x","speedball.physics/handle-walls","board-dimensions","position","board-max","speedball.core/subtract-vectors","board-min","new-position","cljs.core.not_EQ_","speedball.physics/take-until-repeat","rf","previous","cljs.core/volatile!","result","input","cljs.core/deref","cljs.core._EQ_","cljs.core/reduced","cljs.core/vreset!","speedball.physics/xform","n","start","cljs.core.comp","cljs.core.map","cljs.core.partial","speedball.core/add-vectors","cljs.core.take","speedball.physics/Movement","speedball.core/Positions","speedball.core/Index","speedball.core/Position","speedball.physics/Moveable","speedball.physics/init-movement","direction","positionable","vec__26370","angle","speedball.core/direction->angle","cljs.core.assoc","cljs.core.sequence","malli.core._register_function_schema_BANG_","speedball.core/Direction","speedball.core/Positionable","cljs.core/identity","speedball.physics/cancel-movement","moveable","speedball.physics/increment-movement","movement","next-frame","animation-length","cljs.core/assoc-in"],"sourcesContent":["(ns speedball.physics\n  (:require [malli.core :as mc]\n    [malli.instrument :as mi]\n    [speedball.core :as core]))\n\n\n(mi/instrument!)\n(mc/function-schemas)\n\n(defn deg-to-rad [degrees]\n  (* degrees (/ Math/PI 180)))\n\n(defn position-at-time\n  \"Calculates the position (x, y) of an object emitted from (x0, y0) at an angle `theta` with initial velocity `v0`.\n   `friction-coeff` determines how velocity degrades over time (0 = no friction, 1 = high friction).\n   Returns a map with x and y coordinates at time `t`.\"\n  [x0 y0 theta v0 friction-coeff t]\n  (let [-friction-coeff (- 0 friction-coeff)\n        theta (deg-to-rad theta)\n        velocity (max 0 (* v0 (Math/exp (* -friction-coeff t)))) ; Decreasing velocity due to friction\n        xt (+ x0 (* v0 (Math/cos theta) (/ (- 1 (Math/exp (* -friction-coeff t))) friction-coeff))) ; Integrated position in x\n        yt (+ y0 (* v0 (Math/sin theta) (/ (- 1 (Math/exp (* -friction-coeff t))) friction-coeff)))] ; Integrated position in y\n    {:x xt :y yt :v velocity}))\n\n(defn position-to-vec\n  [{x :x y :y}]\n  [x y])\n\n(defn vec-to-int\n  [[x y]]\n  [(int x) (int y)])\n\n(defn scale\n  [scaling [x y]]\n  [(* x scaling) (* y scaling)])\n\n\n(defn positions\n  ([x y theta v0 friction]\n   (positions x y theta v0 friction 0))\n  ([x y theta v0 friction t]\n   (lazy-seq\n     (cons (position-at-time x y theta v0 friction t)\n           (positions x y theta v0 friction (inc t))))))\n\n(defn handle-min-flip-component\n  [board-min-value value]\n  (if (< value board-min-value)\n    (let [overflow (- board-min-value value)]\n      (+ board-min-value overflow))\n    value))\n\n(defn handle-max-flip-component\n  [board-max-value value]\n  (if (> value board-max-value)\n    (let [overflow (- value board-max-value)]\n      (- board-max-value overflow))\n    value))\n\n(defn handle-min-flip\n  [[board-min-y board-min-x] [value-y value-x]]\n  [(handle-min-flip-component board-min-y value-y)\n   (handle-min-flip-component board-min-x value-x)])\n\n(defn handle-max-flip\n  [[board-max-y board-max-x] [value-y value-x]]\n  [(handle-max-flip-component board-max-y value-y)\n   (handle-max-flip-component board-max-x value-x)])\n\n(defn handle-walls\n  [board-dimensions position]\n  (let [board-max (core/subtract-vectors board-dimensions [2 2])\n        board-min [1 1]]\n    (loop [position position]\n      (let [new-position (->> position\n                              (handle-min-flip board-min)\n                              (handle-max-flip board-max))]\n        (if (not= position new-position)\n          (recur new-position)\n          new-position)))))\n\n\n\n(defn take-until-repeat []\n  (fn [rf]\n    (let [previous (volatile! -123)]\n      (fn\n        ([] (rf)) ; Init arity\n        ([result] (rf result)) ; Completion arity\n        ([result input] ; Step arity\n         (if (= @previous input)\n           (reduced result) ; Stop early if a repeat is found\n           (do\n             (vreset! previous input)\n             (rf result input))))))))\n\n\n\n(defn xform [n start board-dimensions]\n  (comp\n    (map position-to-vec)\n    (map (partial scale 0.1))\n    (map vec-to-int)\n    (map (partial core/add-vectors start))\n    (map (partial handle-walls board-dimensions))\n    (take n)))\n    ;(take-until-repeat)))\n\n\n;(transduce xform conj (positions 0 0 30 20 0.2))\n\n;(defn take-and-remainder [s]\n;  [(sequence (xform 1) s) (drop 1 s)])\n\n;(sequence (xform 10) (positions 0 0 30 20 0.2))\n\n(def Movement\n  [:map\n   [:path core/Positions]\n   [:frame core/Index]\n   [:length core/Index]\n   [:start core/Position]])\n(def Moveable\n  [:map\n   [:position core/Position]\n   [:movement [:maybe Movement]]])\n\n(defn init-movement [direction board-dimensions positionable]\n  (let [[x y] (:position positionable)\n        angle (core/direction->angle direction)]\n    (assoc positionable\n      :movement {:path (sequence (xform 10 [x y] board-dimensions) (positions x y angle 20 0.2))\n                 :frame 0\n                 :length 5\n                 :start [x y]})))\n(mc/=> init-movement [:=> [:cat core/Direction core/Position core/Positionable] Moveable])\n\n(defn cancel-movement [moveable]\n  (assoc moveable :movement nil))\n\n(defn increment-movement [moveable]\n  (if (some? (:movement moveable))\n    (let [movement (:movement moveable)\n          next-frame (-> movement :frame inc)\n          animation-length (-> movement :length)]\n      (if (>= next-frame animation-length)\n        (cancel-movement moveable)\n        (let [new-position (-> movement :path (nth next-frame))]\n          (-> moveable\n              (assoc-in [:movement :frame] next-frame)\n              (assoc-in [:position] new-position)))))\n    moveable))\n\n(mc/=> increment-movement [:=> [:cat Moveable] Moveable])\n\n\n(->> {:position [2 2]}\n     (init-movement :southeast [6 6]))\n\n\n\n\n\n"]}