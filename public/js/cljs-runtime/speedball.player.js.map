{"version":3,"sources":["speedball/player.cljs"],"mappings":";AAOA,AAACA;AACD,AAACC;AAED,0BAAA,mFAAA,mDAAA,2CAAA,yDAAA,aAAA,mFAAA,8FAAA,mFAAA,0FAAA,mFAAA,wEAAA,1wBAAKC,kaAGSC,4KACFC;AAGZ,uCAAA,vCAAMC,sFAAqBC,gBAAgBC;AAA3C,AACE,OAACC,kHAAiBF,gBAAgB,mFAAIG,kDAAAA,pIAAgBF,0CAAAA,qEAAAA;;AAExD,AAAA,AAAAG,yEAAA,AAAA,iFAAA,AAAA,uFAAA,mFAAA,iDAAA,mFAAA,oDAAAP,wBAAAC,iCAAAD,gCAAA,2CAAA,sDAAA,wBAAA,oDAAA,GAAA,yDAAA,EAAA,6DAAA,GAAA,iEAAA,WAAA,qDAAAQ;;AAAA,AAAA,AAEA,+BAAA,/BAAMC,sEAAaC,OAAON,UAAUO;AAApC,AACE,IAAMC,eAAa,AAACV,qCAAoB,AAACW,wBAAcH,QAAQN;AAA/D,AACE,GAAI,AAACU,sCAAsBF,aAAaD;AACtC,mEAAA,6HAAA,zLAACI,qDAAML,qEACKE,wHACFR;;AACVM;;;AACN,AAAA,AAAAH,yEAAA,AAAA,iFAAA,AAAA,uEAAA,mFAAA,iDAAA,mFAAA,oDAAAR,wBAAAE,yBAAAe,8BAAAjB,gCAAA,2CAAA,sDAAA,wBAAA,oDAAA,GAAA,yDAAA,EAAA,6DAAA,GAAA,iEAAA,WAAA,qDAAAS;;AAAA,AAAA,AAEA,AAAA,8BAAA,sCAAAS,pEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,0DAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,4DAAA,5DAAMD;AAAN,AAAA,kDAAA,8DAAA,mFAAA,IAAA,YAAA,yDAAA,sDAAA,wEAAA;;;AAAA,CAAA,4DAAA,5DAAMA,uEAKFE;AALJ,AAMG,OAACC,uGAAM,AAACC,4DAAYF;;;AANvB,CAAA,sDAAA,tDAAMF;;AAAN","names":["malli.instrument.instrument_BANG_","malli.core.function_schemas","speedball.player/Player","speedball.core/Position","speedball.core/Direction","speedball.player/add-player-position","player-position","direction","speedball.core.add_vectors","speedball.core/directions","malli.core._register_function_schema_BANG_","cljs.core/identity","speedball.player/move-player","player","board","new-position","speedball.core/position","speedball.board/valid-position?","cljs.core.assoc","speedball.board/Board","var_args","G__26378","speedball.player/new-player","js/Error","arg","cljs.core.merge","speedball.player.new_player"],"sourcesContent":["(ns speedball.player\n  (:require [malli.core :as mc]\n            [malli.instrument :as mi]\n            [speedball.core :as core]\n            [speedball.board :as board]))\n\n\n(mi/instrument!)\n(mc/function-schemas)\n\n(def Player\n  [:map\n   {:closed true}\n   [:position core/Position]\n   [:facing core/Direction]\n   [:holding-ball? :boolean]])\n\n(defn add-player-position [player-position direction]\n  (core/add-vectors player-position (-> core/directions direction)))\n\n(mc/=> add-player-position [:=> [:cat core/Position core/Direction] core/Position])\n\n(defn move-player [player direction board]\n  (let [new-position (add-player-position (core/position player) direction)]\n    (if (board/valid-position? new-position board)\n      (assoc player\n        :position new-position\n        :facing direction)\n      player)))\n(mc/=> move-player [:=> [:cat Player core/Direction board/Board] Player])\n\n(defn new-player\n  ([]\n   {:position [2 2]\n    :facing :north\n    :holding-ball? false})\n  ([arg]\n   (merge (new-player) arg)))"]}