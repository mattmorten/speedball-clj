{"version":3,"sources":["speedball/renderer/camera_mount.cljs"],"mappings":"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","names":["malli.instrument.instrument_BANG_","malli.core.function_schemas","speedball.renderer.camera-mount/TrackingState","speedball.core/Index","speedball.renderer.camera-mount/CameraMount","speedball.camera/Camera","speedball.renderer.camera-mount/new-camera-mount","speedball.camera/new-camera","malli.core._register_function_schema_BANG_","cljs.core/identity","speedball.renderer.camera-mount/mount-state","camera-mount","speedball.renderer.camera-mount/tracking-subject-position","game","G__26406","cljs.core/Keyword","js/Error","speedball.game/player-position","speedball.game/ball-position","speedball.renderer.camera-mount/run-tracking","tracking-subject-position","camera","minimum-bounds","maximum-bounds","speedball.core/subtract-vectors","speedball.board/board-size","speedball.camera/dimensions","cljs.core.update_in","old-camera","speedball.camera/center-to","speedball.game/Game","speedball.renderer.camera-mount/evaluate-camera-mount-for-game","G__26410","speedball.renderer.camera-mount/track-player","player-n","cljs.core.assoc","cljs.core/assoc-in","speedball.renderer.camera-mount/track-ball","speedball.renderer.camera-mount/toggle-player-on-camera","number-of-players","speedball.game/number-of-players","existing-player","cljs.core/mod","speedball.renderer.camera-mount/render-row","rendered-board-row","vec__26412","cljs.core.nth","_","x","speedball.core/position","width","sub","cljs.core.subvec","cljs.core/vec","cljs.core.take","cljs.core.concat","cljs.core.repeat","p__26416","vec__26417","vec__26420","speedball.renderer.camera-mount/-render-row-guard","result","cljs.core._EQ_","cljs.core/count","speedball.board/Row","speedball.renderer.camera-mount/render-camera","rendered-board","vec__26423","y","height","board-width","cljs.core/first","cljs.core.map","row","speedball.board/Board","speedball.renderer.camera-mount/render-camera-mount"],"sourcesContent":["(ns speedball.renderer.camera-mount\n  (:require [clojure.string :as str]\n            [clojure.pprint :as pprint]\n            [malli.core :as mc]\n            [malli.instrument :as mi]\n            [speedball.core :as core]\n            [speedball.game :as game]\n            [speedball.player :as player]\n            [speedball.board :as board]\n            [speedball.camera :as camera]\n            [speedball.ball :as ball]\n            [speedball.physics :as physics]))\n\n(mi/instrument!)\n(mc/function-schemas)\n\n;;\n;; Mount\n;;\n(def TrackingState\n  [:map\n   [:player core/Index]\n   [:object [:enum :player :ball]]])\n(def CameraMount\n  [:map\n   [:camera camera/Camera]\n   [:state [:enum :tracking]]\n   [:details TrackingState]])\n\n(defn new-camera-mount []\n  {:camera (camera/new-camera)\n   :state :tracking\n   :details {:object :ball\n             :player 0}})\n\n(mc/=> new-camera-mount [:=> [:cat] CameraMount])\n\n(defn mount-state [camera-mount] (:state camera-mount))\n\n(defn tracking-subject-position\n  [camera-mount game]\n  (case (-> camera-mount :details :object)\n    :player (game/player-position game (-> camera-mount :details :player))\n    :ball (game/ball-position game)))\n\n(defn run-tracking\n  [camera-mount game]\n  (let [tracking-subject-position (tracking-subject-position camera-mount game)\n        camera (:camera camera-mount)\n        minimum-bounds [0 0]\n        maximum-bounds (core/subtract-vectors board/board-size (camera/dimensions camera))]\n    (update-in\n      camera-mount\n      [:camera]\n      (fn [old-camera] (camera/center-to old-camera tracking-subject-position minimum-bounds maximum-bounds)))))\n\n(mc/=> run-tracking [:=> [:cat CameraMount game/Game] CameraMount])\n\n(defn evaluate-camera-mount-for-game\n  [camera-mount game]\n  (case (mount-state camera-mount)\n    :tracking (run-tracking camera-mount game)))\n\n(mc/=> evaluate-camera-mount-for-game [:=> [:cat CameraMount game/Game] CameraMount])\n\n(defn track-player\n  [camera-mount player-n]\n  (-> camera-mount\n      (assoc :state :tracking)\n      (assoc-in [:details :object] :player)\n      (assoc-in [:details :player] player-n)))\n\n(defn track-ball\n  [camera-mount]\n  (-> camera-mount\n      (assoc :state :tracking)\n      (assoc-in [:details :object] :ball)))\n\n(defn toggle-player-on-camera\n  [camera-mount game]\n  (let [number-of-players (game/number-of-players game)\n        existing-player (-> camera-mount :details :player)]\n    (track-player camera-mount (mod (inc existing-player) number-of-players))))\n\n;;\n;; Rendering\n;;\n(defn render-row\n  [camera rendered-board-row]\n  (let [[_ x] (core/position camera)\n        width (:width camera)\n        sub (subvec rendered-board-row x)]\n    (vec (take width (concat sub (repeat :0))))))\n\n;; Guards are weird! They have an extra surrounding square bracket\n(defn -render-row-guard\n  [[[camera _] result]]\n  (= (:width camera) (count result)))\n(mc/=> render-row [:=> [:cat camera/Camera board/Row] board/Row [:fn -render-row-guard]])\n\n(defn render-camera\n  [camera rendered-board]\n  (let [[y _] (core/position camera)\n        height (:height camera)\n        sub (subvec rendered-board y)\n        board-width (-> rendered-board first count)]\n    (vec (map\n           (fn [row]\n             (render-row camera row))\n           (take height (concat sub (repeat (vec (repeat board-width :0)))))))))\n(mc/=> render-camera [:=> [:cat camera/Camera board/Board] board/Board])\n\n\n\n\n(defn render-camera-mount\n  [camera-mount rendered-board]\n  (render-camera (:camera camera-mount) rendered-board))\n\n(render-camera\n  {:width 3 :height 2 :position [6 3]}\n  [[:n :n :n :n :n]\n   [:w :. :. :. :e]\n   [:w :. :. :. :e]\n   [:w :. :. :. :e]\n   [:w :. :. :. :e]\n   [:s :s :s :s :s]])"]}